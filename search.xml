<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx主要应用 - 虚拟主机</title>
    <url>/2020/07/16/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8-%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>虚拟主机，就是把一台物理服务器划分成多个‘虚拟’的服务器，这样一台物理服务器就可以当作多个服务器来使用，从而可以配置多个网站</li>
<li>Nginx 提供虚拟主机的功能，就是为了让我们无需安装多个 Nginx, 就可以运行多个网站</li>
<li>Nginx 下，一个 server 标签就是一个虚拟主机</li>
<li>Nginx 的虚拟主机就是通过 nginx.conf 中 server 节点指定的，要想设置多个虚拟主机，配置多个 server 节点即可</li>
</ul>
</blockquote>
<h2 id="配置虚拟主机，通常有一下两种方式"><a href="#配置虚拟主机，通常有一下两种方式" class="headerlink" title="配置虚拟主机，通常有一下两种方式"></a>配置虚拟主机，通常有一下两种方式</h2><h3 id="1-基于端口的虚拟主机"><a href="#1-基于端口的虚拟主机" class="headerlink" title="1. 基于端口的虚拟主机"></a>1. 基于端口的虚拟主机</h3><ul>
<li>使用端口号来做区分，server 节点中的 listen</li>
</ul>
<h3 id="2-基于域名的虚拟主机"><a href="#2-基于域名的虚拟主机" class="headerlink" title="2. 基于域名的虚拟主机"></a>2. 基于域名的虚拟主机</h3><ul>
<li>使用域名来做区分， server 节点中的 server_name</li>
</ul>
<hr>
<blockquote>
<p>自定义域名，使用时，需修改 <strong>hosts文件配置</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 例如</span><br><span class="line">192.168.208.128 www.sean.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件位置 ： C:\windows\System32\driver\etc\hosts</p>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx主要应用 - 动静分离</title>
    <url>/2020/07/16/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>Nginx 的 <strong>负载均衡</strong> 和 <strong>静态代理</strong> 结合在一起, 可以实现 <strong>动静分离</strong>, 这是实际应用中常见的一种场景</li>
<li>动态资源, 如 jsp 由 Tomcat 或其他 Web 服务器完成</li>
<li>静态资源, 如 img / css / js 等由 Nginx 服务器完成</li>
<li>充分利用其各自优势, 从而达到更高效合理的架构</li>
</ul>
</blockquote>
<h2 id="动静分离示例图"><a href="#动静分离示例图" class="headerlink" title="动静分离示例图"></a>动静分离示例图</h2><p><img src="/images/Nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E7%AE%80%E6%98%93%E5%9B%BE.png" alt=""></p>
<blockquote>
<ul>
<li>Nginx 在一台 Linux 上安装一份, 可以启动多 , 每个 Nginx 的配置文件不一样即可</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx主要应用 - 静态代理</title>
    <url>/2020/06/30/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<ul>
<li><p>把所有 <strong>静态资源</strong> 的访问改为访问 Nginx, 而不是访问 Tomcat, 因为 Nginx 更擅长于静态资源的处理, 性能更好, 效率更高</p>
</li>
<li><p>实际应用中, 我们应该将 <strong>静态资源</strong> 比如 : image / css / html / js 等交给 Nginx 做处理, 而不是由 Tomcat 处理</p>
</li>
</ul>
<h2 id="Nginx静态代理实现的两种方式"><a href="#Nginx静态代理实现的两种方式" class="headerlink" title="Nginx静态代理实现的两种方式"></a>Nginx静态代理实现的两种方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote>
<p><strong>通过在 Nginx 的 nginx.conf 配置文件中添加静态资源的 location</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 例如 : ( 表示 () 中这些后缀结尾的文件都由 Nginx 处理 )</span><br><span class="line">location ~.*\.(js|css|html|git|jpg|jpeg|png|doc|ppt|mp3)$ &#123;</span><br><span class="line">    root &#x2F;opt&#x2F;static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>~</strong> 表示正则匹配, 也就是说后面的内容可以是正则表达式匹配</li>
<li><strong>.</strong> 第一个点, 表示任意字符</li>
<li><strong>*</strong> 表示一个或多个字符</li>
<li><strong>\.</strong> 是转义字符, 是后面这个点的转义字符</li>
<li><strong>|</strong> 表示或者</li>
<li><strong>$</strong> 表示结尾</li>
</ul>
</blockquote>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote>
<p>通过在 nginx.conf 配置文件中配置 <strong>静态资源所在目录</strong> 实现</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~.*&#x2F;(css|js|img|images) &#123;</span><br><span class="line">    root &#x2F;opt&#x2F;static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>将静态资源放入 /opt/static 目录下, 拦截请求地址中的 ‘String’, 然后用户访问时由 Nginx 返回这些静态资源</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>静态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx主要应用 - 负载均衡</title>
    <url>/2020/06/29/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>将用户输入的 http 网址请求分发到集群中不同的机器上, 这就是负载均衡要做的事情</li>
<li>负载均衡通常是指将请求 ‘均匀’ 分推到集群中多个服务器节点上进行执行, 这里的均匀是指在一个比较大的统计范围内是基本均匀的, 并不是完全均匀</li>
</ul>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h3><ul>
<li>比如 : F5 / 深信服 / Array等</li>
<li>优点 : 有厂商专业的技术服务团队提供支持, 性能稳定</li>
<li>缺点 : 费用昂贵, 对于规模较小的网络应用成本太高</li>
</ul>
<h3 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h3><ul>
<li>比如 : Nginx / LVS / HAProxy等</li>
<li>优点 : 免费开源, 成本低廉</li>
</ul>
<h2 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h2><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><blockquote>
<p>通过在 Nginx 的 nginx.conf 文件进行 <strong>配置</strong> 即可实现</p>
</blockquote>
<ul>
<li>下为Nginx负载简易图<br><img src="/images/Nginx%E8%B4%9F%E8%BD%BD%E7%AE%80%E6%98%93%E5%9B%BE.png" alt=""></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-在-http-模块添加-例"><a href="#1-在-http-模块添加-例" class="headerlink" title="1. 在 http 模块添加 ( 例 )"></a>1. 在 http 模块添加 ( 例 )</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># upstream 的名字, 一般定为域名</span><br><span class="line">upstream www.sean.com &#123; </span><br><span class="line">#对应 Tomcat 的 IP &amp; Port</span><br><span class="line">    server 127.0.0.1:9100 weight&#x3D;3; </span><br><span class="line">#有几个 Tomcat, 就配几个 server</span><br><span class="line">    server 127.0.0.1:9200 weight&#x3D;1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>其中 <strong>weight</strong> 表示权重, 用于后端服务器性能不均的情况, 访问比率约等于权重之比, 权重越大访问机会越多</li>
<li><strong>upstream</strong> 是配置 <strong>Nginx</strong> 与后端服务器负载均衡非常重要的一个模块. 并且它还能对后端服务器的健康状况进行检查, 若后端服务器中的一台发生故障, 则前端的请求不会转发到该故障的机器</li>
</ul>
</blockquote>
<h4 id="2-在server模块里添加-例"><a href="#2-在server模块里添加-例" class="headerlink" title="2. 在server模块里添加 ( 例 )"></a>2. 在server模块里添加 ( 例 )</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># www.sean.com字符串要与upstream后面的字符串相等</span><br><span class="line">location &#x2F;sean &#123; # 项目路径</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;www.sean.com; # 代理转发</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nginx常用负载均衡策略"><a href="#Nginx常用负载均衡策略" class="headerlink" title="Nginx常用负载均衡策略"></a>Nginx常用负载均衡策略</h2><blockquote>
<p><strong>轮询(默认)</strong> / <strong>权重</strong> / <strong>ip_hash</strong> / <strong>最少链接</strong></p>
</blockquote>
<h3 id="1-轮询"><a href="#1-轮询" class="headerlink" title="1. 轮询"></a>1. 轮询</h3><blockquote>
<p>每个请求轮流分配到不同的后端服务器, 如果后端服务器down掉, 将自动剔除</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 无 weight</span><br><span class="line">upstream sean &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:9090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-权重"><a href="#2-权重" class="headerlink" title="2. 权重"></a>2. 权重</h3><blockquote>
<p>每个请求按一定比例分发到不同的服务器, <strong>weight</strong> 值越大 访问的比例越大, 用于后端服务器性能不均的情况</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 有 weight</span><br><span class="line">upstream sean &#123;</span><br><span class="line">    server 192.168.0.14 weight&#x3D;5;</span><br><span class="line">    server 192.168.0.15 weight&#x3D;2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-ip-hash"><a href="#3-ip-hash" class="headerlink" title="3. ip_hash"></a>3. ip_hash</h3><blockquote>
<p>也叫 IP 绑定, 每个请求按访问 <strong>IP的hash值</strong> 分配, 这样每个访问 客户端都会固定访问一个后端服务器, 可以解决 <strong>会话session</strong> 丢失的问题</p>
</blockquote>
<ul>
<li>使用源地址哈希算法, 将同一客户端的请求总是发往同一后端服务器, 除非该服务器不可用</li>
<li>类似 : hash(“124.207.55.82”) % 2 = ?  (0 | 1)</li>
</ul>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><blockquote>
<ul>
<li>当后端服务器宕机, session会丢失; </li>
<li>来自同一局域网的客户端会被转发到同一后端服务器, 可能导致负载失衡; </li>
<li>不适用于 CDN 网络</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream sean &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:9090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-最少链接"><a href="#4-最少链接" class="headerlink" title="4. 最少链接"></a>4. 最少链接</h3><blockquote>
<p>Web请求会被转发到连接数最少的服务器上</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream sean &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:9090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡其他几个配置"><a href="#负载均衡其他几个配置" class="headerlink" title="负载均衡其他几个配置"></a>负载均衡其他几个配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 其他所有非 backup 机器 down 机的时候, 才会请求 backup 机器, 俗称 &#39;备胎&#39;</span><br><span class="line"># backup 可用在上线期间更新产品 , reload</span><br><span class="line">upstream sean &#123;</span><br><span class="line">    server 127.0.0.1:9100;</span><br><span class="line">    server 127.0.0.1:9200 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># down 表示当前的 server 是 down 状态, 不参与负载均衡</span><br><span class="line">upstream sean &#123;</span><br><span class="line">    server 127.0.0.1:9100;</span><br><span class="line">    server 127.0.0.1:9200 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx主要应用</title>
    <url>/2020/06/19/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>主要是应用配置文件来实现</p>
</blockquote>
<ul>
<li>静态网站</li>
<li>负载均衡</li>
<li>静态代理</li>
<li>动静分离</li>
<li>虚拟主机</li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx主要应用 - 静态网站</title>
    <url>/2020/06/22/Nginx%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8-%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>Nginx 是一个 HTTP 的 Web 服务器, 可以将服务器上的静态文件 (如html / img等) 通过 HTTP 协议返回给浏览器客户端</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># IP + Port &#x3D; root</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80; # 端口号</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;opt&#x2F;www&#x2F;; # 静态文件路径</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>静态网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngxin配置文件</title>
    <url>/2020/06/18/Ngxin%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>学习 <strong>Nginx</strong>, 首先需要对它的核心配置文件 nginx.conf 有一定认识</p>
</blockquote>
<blockquote>
<p>Nginx 的核心配置文件主要由三个部分构成</p>
</blockquote>
<p><strong><em>基本配置</em></strong> / <strong><em>events配置</em></strong> / <strong><em>http配置( 基本配置 / 多个server配置 )</em></strong></p>
<ul>
<li>看下图</li>
</ul>
<p>  <img src="/images/nginx%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E8%AF%A6%E8%A7%A3.png" alt=""></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx日志管理 &amp; 日志自动备份</title>
    <url>/2020/08/03/Nginx%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86-%E6%97%A5%E5%BF%97%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<ul>
<li><p>Nginx 是一个非常轻量的 Web服务器，体积小、性能高、速度快等诸多优点。但不足的是也存在缺点，比如其产生的访问日志文件一直就是一个，不会自动地进行切割，如果访问量很大的话，将 导致日志文件容量非常大，不便于管理。当然了，我们也不希望看到这么庞大的一个访问日志文件，那需要手动对这个文件进行切割。</p>
</li>
<li><p>在 Linux 平台上 Shell 脚本丰富，使用 Shell 脚本加 crontab 命令能非常方便地进行切割</p>
</li>
<li><p>由于 Nginx 的日志都是写在一个文件当中的，因此，我们需要每天零点将前一天的日志存为另外一个文件，这里我们就将 Nginx 位于 logs 目录中的 access.log 存为 access_[yyyy-MM-dd].log 的文件。其实 logs 目录中还有个 error.log 的错误日志文件，这个文件也需要每天切割一个，在这里就说 access.log 了，error.log 的切割方法类似。</p>
</li>
<li><p>在 Linux 平台上进行切割，需要使用 date 命令以获得昨天的日期、使用 kill 命令向 Nginx 进程发送重新打开日志文件的信号，以及 crontab 设置执行任务周期。</p>
</li>
</ul>
<h2 id="Nginx日志描述"><a href="#Nginx日志描述" class="headerlink" title="Nginx日志描述"></a>Nginx日志描述</h2><ul>
<li>通过访问日志, 可以得到用户地域来源 / 跳转来源 / 使用终端 / 某个URL访问量等相关信息 ;</li>
<li>通过错误日志, 可以得到系统某个服务或Server的性能瓶颈等</li>
<li>将日志好好利用, 可以得到很多有价值的信息</li>
</ul>
<h2 id="Nginx日志格式"><a href="#Nginx日志格式" class="headerlink" title="Nginx日志格式"></a>Nginx日志格式</h2><h3 id="nginx-conf配置文件"><a href="#nginx-conf配置文件" class="headerlink" title="nginx.conf配置文件"></a>nginx.conf配置文件</h3><ul>
<li>通过查看Ngxin配置文件中的 <code>access.log</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这说明, 该Server, 它的访问日志的文件时 Logs&#x2F;host.access.log, 默认使用的格式 &#39;main&#39; 格式</span><br><span class="line">access_log logs&#x2F;host.access.log main;</span><br></pre></td></tr></table></figure></li>
<li>除了<code>main</code>格式, 还可以自定义其他格式</li>
<li><code>main</code>的主要格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#main格式是我们定义好的一种日志格式, 并起个名字, 便于引用, 以下例子main类型的日志, 记录的remote_addr ... http_x_forwarder.for等选项</span><br><span class="line">log_format main &#39;$remote_addr - $remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarder_for&#39;;</span><br></pre></td></tr></table></figure></li>
<li>如默认的main日志格式, 记录以下几项:<ul>
<li>远程IP-远程用户/用户时间 请求方式 (如GET/POST) 请求body长度 referer来源信息</li>
<li>http_user_agent 用户代理/蜘蛛, 被转发的请求的原始IP</li>
<li>http_x_forwarder_for; 在经过代理时, 代理把你的本来的IP加在此头信息中, 传输你的原始IP</li>
<li>log_format 参数明细表 : <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$remote_addr    #客户端的IP地址(代理服务器, 显示代理服务IP)</span><br><span class="line">$remote_user    #用于记录远程客户端的用户名称(一般为&#39;-&#39;)</span><br><span class="line">$time_local    #用于记录访问时间和时区</span><br><span class="line">$request    #用于请求记录的URL以及请求方法</span><br><span class="line">$status    #响应状态码, 例如: 200成功 &#x2F; 404页面找不到等</span><br><span class="line">$body_bytes_sent    #给客户端发送的文件主题内容字节数</span><br><span class="line">$http_user_agent    #用户所使用的代理(一般为浏览器)</span><br><span class="line">$http_x_forwarder_for    #可以记录客户端IP, 通过代理服务器来记录客户端的IP地址</span><br><span class="line">$http_referer    #可以记录用户是从哪个链接访问过来的</span><br></pre></td></tr></table></figure></li>
<li>Nginx允许针对不同的Server做不同的log, (有的Web服务器不支持)</li>
</ul>
</li>
</ul>
<h3 id="实际配置信息"><a href="#实际配置信息" class="headerlink" title="实际配置信息"></a>实际配置信息</h3><ul>
<li>位置(两种方式)<ul>
<li>http内, server外</li>
<li>server内, location下 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置后, 重启即可</span><br><span class="line">access_log logs&#x2F;host.access.log main;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="Nginx日志分隔"><a href="#Nginx日志分隔" class="headerlink" title="Nginx日志分隔"></a>Nginx日志分隔</h3><ul>
<li>Nginx的日志文件没有rotate功能, 编写每天生成一个日志, 我们可以写一个Nginx日志分隔脚本来自动切割日志文件<ul>
<li>第一步需要对日志文件重命名, 一般日志文件的命名根据时间日期进行命名</li>
<li>第二步向Nginx朱进程发送USR1信号, Nginx主进程接到信号后会从配置文件中读取日志文件名称, 重新打开日志文件(以配置文件中的日志名称命名), 并以工作进程的用户作为日志文件的所有者, 重新打开日志文件后, Nginx主进程会关闭重命名的日志文件并通知进程使用新打开的日志文件, 工作进程立即打开新的日志文件并关闭重命名的日志文件</li>
</ul>
</li>
</ul>
<ol>
<li>以日期命名日志文件名 :</li>
</ol>
<ul>
<li>查看时间/日期 : date命令 </li>
<li>时间/日期格式化命令: date -d yesterday +%Y%m%d</li>
</ul>
<ol start="2">
<li>编写一个shell脚本, 自动切割日志文件</li>
</ol>
<ul>
<li>创建一个data文件夹, 存放日志文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">cd data</span><br></pre></td></tr></table></figure></li>
<li>编写一个shell脚本, runlog.sh — 脚本示例 ( 多选一 )<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">#设置基路径</span><br><span class="line">BASE_DIR&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">#要切割备份的日志文件名</span><br><span class="line">BASE_FILE_NAME&#x3D;access.log</span><br><span class="line">#日志路径</span><br><span class="line">LOG_PATH&#x3D;$BASE_DIR&#x2F;logs</span><br><span class="line">#日志切割后备份路径</span><br><span class="line">BAK_PATH&#x3D;$BASE_DIR&#x2F;back_up_logs</span><br><span class="line">#切割日志文件</span><br><span class="line">LOG_FILE&#x3D;$LOG_PATH&#x2F;$BASE_FILE_NAME</span><br><span class="line">#获取时间</span><br><span class="line">BAK_TIME&#x3D;&#96;&#x2F;bin&#x2F;date -d yesterday +%Y%m%d%H%M&#96;  &#x2F;&#x2F;为了测试效果，以分钟为单位，故每分钟备份一次，具体按照实际需求设置</span><br><span class="line">#备份文件</span><br><span class="line">BAK_FILE&#x3D;$BAK_PATH&#x2F;$BAK_TIME-$BASE_FILE_NAME</span><br><span class="line">echo $BAK_FILE</span><br><span class="line">#关闭nginx</span><br><span class="line">$BASE_DIR&#x2F;sbin&#x2F;nginx -s stop</span><br><span class="line">#移动切割文件</span><br><span class="line">mv $LOG_FILE $BAK_FILE</span><br><span class="line">#启动nginx</span><br><span class="line">$BASE_DIR&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure></li>
<li>编写一个shell脚本, runlog.sh — 脚本示例 ( 多选一 )<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">LOGS_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</span><br><span class="line">YESTERDAY&#x3D;$(date -d &quot;yesterday&quot; +%Y-%m-%d)</span><br><span class="line">mv $&#123;LOGS_PATH&#125;&#x2F;sdk_acc.log $&#123;LOGS_PATH&#125;&#x2F;sdk_acc_$&#123;YESTERDAY&#125;.log</span><br><span class="line">mv $&#123;LOGS_PATH&#125;&#x2F;sell_acc.log $&#123;LOGS_PATH&#125;&#x2F;sell_acc_$&#123;YESTERDAY&#125;.log</span><br><span class="line">kill -USR1 $(cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid)       # 向 Nginx 主进程发送 USR1 信号。USR1 信号是重新打开日志文件</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>Linux定时任务, 旨在执行 shell 脚本</li>
</ol>
<ul>
<li><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑定时任务</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">#输入定时设置, 例举一小时执行一次 (cron表达式)</span><br><span class="line">#每小时的第59分钟执行该shell脚本进行日志切割备份</span><br><span class="line">59 *&#x2F;1 * * * sh &#39;shell脚本位置&#39;</span><br><span class="line"></span><br><span class="line">#保存退出后, 自动开始执行</span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本授权</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 脚本授权</span><br><span class="line">chmod 755 log.sh</span><br><span class="line"></span><br><span class="line"># 创建定时任务调度,并执行(保存退出即可自动开始执行定时任务)</span><br><span class="line"># 执行该命令设置定时任务配置</span><br><span class="line">crontab -e</span><br><span class="line"># 添加如下配置,保存退出</span><br><span class="line">*&#x2F;1 * * * * sh &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;log.sh</span><br><span class="line"></span><br><span class="line">#关闭定时任务</span><br><span class="line">crontab -l #查看所有定时任务</span><br><span class="line">crontab -r #删除所有定时任务</span><br></pre></td></tr></table></figure>

<ul>
<li>cron 表达式参考 <a href="https://crontab.guru/" target="_blank" rel="noopener">点我点我</a></li>
</ul>
<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><blockquote>
<p>crontab -e //编辑某个用户的cron服务 //这个最重要，自己编写crontab</p>
</blockquote>
<blockquote>
<p>crontab -l //列出某个用户cron服务的详细内容//这个也重要，查看自己写了哪些定时任务</p>
</blockquote>
<blockquote>
<p>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</p>
</blockquote>
<blockquote>
<p>crontab -r //删除某个用户的cron服务</p>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx番外-简单的配置详解</title>
    <url>/2020/08/20/Nginx%E7%95%AA%E5%A4%96-%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开启进程数 &lt;&#x3D;CPU数 </span><br><span class="line">worker_processes  1;</span><br><span class="line">#自定义错误日志保存位置，全局设置，默认logs&#x2F;error.log</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#每个进程最大连接数（最大连接&#x3D;连接数x进程数）每个worker允许同时产生多少个链接，默认1024</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line">http &#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include       mime.types;</span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    #自定义日志文件输出格式 全局设置</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">              &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">              &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    #自定义全局请求日志保存位置，全局设置，默认logs&#x2F;access.log， 定义格式：文件存储位置 + 日志输出格式</span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line">    #打开发送文件</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #打开gzip压缩</span><br><span class="line">    #gzip  on;</span><br><span class="line">    #配置虚拟主机，基于域名、ip和端口，可以配置多个server</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口，可以是ip:port 或者 port</span><br><span class="line">        listen       80;</span><br><span class="line">        #监听域名,可以是ip或者域名，server_name有三种匹配方式：精准匹配（www.domain.com）、通配符匹配（*.domain.com 、www.*）、正则表达式匹配（~^(?.+)\.domain\.com$）</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #自定义请求日志，局部，当前server有效</span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">        #错误页面及其返回地址</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        #请求匹配，同样有精准（&#x3D; &#x2F;index.html）、模糊（~ index）、正则，允许配置多个location</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #返回根路径地址（相对路径:相对于&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;）</span><br><span class="line">            root   html;</span><br><span class="line">            #默认主页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #</span><br><span class="line">        location &#x2F;html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #</span><br><span class="line">    &#125;</span><br><span class="line">    #</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx开篇简介</title>
    <url>/2020/06/16/Nginx%E5%BC%80%E7%AF%87%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>Web服务器 - 反向代理服务器</p>
</blockquote>
<ul>
<li>简介</li>
<li>环境搭建</li>
<li>配置文件</li>
<li>主要应用</li>
<li>静态网站</li>
<li>负载均衡</li>
<li>静态代理</li>
<li>动静分离</li>
<li>虚拟主机</li>
</ul>
<hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol>
<li>高性能的Web服务器和反向代理服务器, 也可作为邮件代理服务器</li>
<li>俄罗斯人 Igor Sysoev 采用C语言开发编写, First - 2004/10/04</li>
<li>特点: 占有内存少 / 并发处理能力强 / 高性能 / 低系统资源消耗 / 官方测试 - 5万并发请求</li>
<li>同类型的Web服务器: Apache / Lighttpd / Tengine等</li>
<li>并发处理能力在同类型Web服务器中为最佳选择</li>
<li>免费开源 / 同时其商业版本提供性能优化, 宕机等紧急问题处理等技术支持和服务</li>
</ol>
<h2 id="Nginx反向代理-Reverse-Proxy"><a href="#Nginx反向代理-Reverse-Proxy" class="headerlink" title="Nginx反向代理 (Reverse Proxy)"></a>Nginx反向代理 (Reverse Proxy)</h2><blockquote>
<p>以反向代理服务器来接收 Internet 上的链接请求, 然后将请求转发给内部网络上的服务器, 并将从服务器上得到的结果返回给 Internet 上请求链接的客户端, 此时代理服务器对外表现为一个<strong><em>反向代理服务器</em></strong><br><img src="/images/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="alt"></p>
</blockquote>
<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><blockquote>
<p>类似一个跳板机, ‘代理访问外部资源’, 通过访问代理服务器, 获取无法访问网站的内容</p>
</blockquote>
<h2 id="正反区别"><a href="#正反区别" class="headerlink" title="正反区别"></a>正反区别</h2><blockquote>
<p>是否知道其底层服务器的 <strong><em>ip</em></strong> , <strong><em>port</em></strong> 等</p>
</blockquote>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>简介</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx环境搭建</title>
    <url>/2020/06/17/Nginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ul>
<li>下载</li>
<li>安装</li>
<li>番外</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li>免费开源 <a href="http://www.nginx.org" target="_blank" rel="noopener">Nginx免费开源地址</a></li>
<li>有 Windows 和 Linux 版本, 但推荐 Linux</li>
<li>下载 nginx … … tar.gz 的源代码文件, copy下方代码块并回车执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#39;... ...&#39; 确定要下载的版本, 建议先访问 &#39;Nginx免费开源地址挑选版本&#39;</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx ... ... tar.gz</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><blockquote>
<p><strong><em>Nginx的安装</em></strong> 需要Linux安装相关的几个库, 否则配置和编译会出现问题</p>
</blockquote>
<ol>
<li><strong>gcc 编译器</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed | grep gcc</span><br><span class="line">yum install gcc -y</span><br></pre></td></tr></table></figure></li>
<li><strong>openssl库</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed | grep openssl</span><br><span class="line">yum install openssl openssl-devel -y</span><br></pre></td></tr></table></figure></li>
<li><strong>pcre库</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed | grep pcre</span><br><span class="line">yum list install pcre pcre-devel -y</span><br></pre></td></tr></table></figure></li>
<li><strong>zlib库</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed | grep zlib</span><br><span class="line">yum install zlib zlib-devel -y</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一次性安装, 命令:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -y 表示自动确认 </span><br><span class="line">yum install gcc openssl openssl-devel pcre pcre-devel zlib zlib-devel -y</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><ol>
<li>解压下载下来的 Nginx 文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 确定下载版本</span><br><span class="line">tar -zxvf nginx ... ... tar.gz</span><br></pre></td></tr></table></figure></li>
<li>切换至解压后的 Nginx 主目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ... ...</span><br></pre></td></tr></table></figure></li>
<li>指定路径安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --prefix 指定安装路径</span><br><span class="line">.&#x2F;configure --prefix &#x3D; &#x2F;usr&#x2F;local&#x2F;nginx</span><br></pre></td></tr></table></figure></li>
<li>编译<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用gcc编译</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装后的文件夹</p>
</blockquote>
</li>
</ol>
<ul>
<li><strong>conf</strong> 配置, nginx.conf 核心</li>
<li><strong>html</strong> 服务器默认访问模版页</li>
<li><strong>logs</strong> 日志</li>
<li><strong>sbin</strong> nginx 启动程序</li>
</ul>
<hr>
<h2 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="1-普通启动-cd-到-nginx-的-sbin-目录下"><a href="#1-普通启动-cd-到-nginx-的-sbin-目录下" class="headerlink" title="1. 普通启动 ( cd 到 nginx 的 sbin 目录下 )"></a>1. 普通启动 ( cd 到 nginx 的 sbin 目录下 )</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure>
<h4 id="2-通过配置文件启动"><a href="#2-通过配置文件启动" class="headerlink" title="2. 通过配置文件启动"></a>2. 通过配置文件启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动程序 -c 配置文件</span><br></pre></td></tr></table></figure>
<h4 id="3-检查是否启动"><a href="#3-检查是否启动" class="headerlink" title="3. 检查是否启动"></a>3. 检查是否启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 由 master 和 worker 进程组成, master 进程读取配置文件并维护 worker 进程, worker 进程则对请求进行实际处理</span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<h3 id="关闭-lt-多种方式-gt"><a href="#关闭-lt-多种方式-gt" class="headerlink" title="关闭 &lt;多种方式&gt;"></a>关闭 &lt;多种方式&gt;</h3><h4 id="1-优雅关闭"><a href="#1-优雅关闭" class="headerlink" title="1. 优雅关闭"></a>1. 优雅关闭</h4><blockquote>
<p>此方式不会影响已经进入的请求, 将其处理完后, 才会关闭</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 找到 nginx 进程号</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"># 执行命令</span><br><span class="line">kill -QUIT &#39;主pid&#39;</span><br><span class="line"># 其中 pid 是主进程号的 pid (master process)</span><br><span class="line"># 其他为子进程 pid (worker process)</span><br></pre></td></tr></table></figure>

<h4 id="2-快速关闭"><a href="#2-快速关闭" class="headerlink" title="2. 快速关闭"></a>2. 快速关闭</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 找到 nginx 进程号</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"># 执行命令</span><br><span class="line">kill -TERM &#39;主pid&#39;</span><br></pre></td></tr></table></figure>

<h4 id="3-重启-Nginx"><a href="#3-重启-Nginx" class="headerlink" title="3. 重启 Nginx"></a>3. 重启 Nginx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="配置检查"><a href="#配置检查" class="headerlink" title="配置检查"></a>配置检查</h3><blockquote>
<p>当修改 Nginx 配置文件后, 可以使用 Nginx 命令进行配置文件语法检查, 用于检查 Nginx 配置文件是否正确</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ... ... nginx配置文件地址</span><br><span class="line">.&#x2F;nginx -c &#x2F;... ...&#x2F;nginx.conf -t</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看 Nginx 版本</span><br><span class="line">.&#x2F;nginx -v</span><br><span class="line">.&#x2F;nginx -V</span><br><span class="line"># 小v 显示 Nginx 版本</span><br><span class="line"># 大V 显示 Nginx 版本, 编译器版本和配置参数</span><br></pre></td></tr></table></figure>

<h3 id="Windows环境搭建"><a href="#Windows环境搭建" class="headerlink" title="Windows环境搭建"></a>Windows环境搭建</h3><blockquote>
<p>在官网下载 windows 版的 Nginx, 将下载包解压即可使用</p>
</blockquote>
<p><a href="https://www.nginx.org/en/download.html" target="_blank" rel="noopener">Windows Nginx 地址</a></p>
<h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><ol>
<li>双击目录下的 nginx</li>
<li>dos 窗口, nginx 主目录下, 命令 start nginx<h4 id="关闭方式"><a href="#关闭方式" class="headerlink" title="关闭方式"></a>关闭方式</h4></li>
<li>资源管理器 ( 两个进程 )</li>
<li>dos 窗口, nginx 主目录下, 命令 nginx -s stop</li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
